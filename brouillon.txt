{# <div class="gender-selected text-white py-2">
					<div class="row-gender flex flex-row py-2">
						<p class=" text-black bg-white rounded-full px-2.5 pb-1 mr-3  hover:bg-blue-500">x</p>
						<p>Pop</p>
					</div>
					<div class="row-gender flex flex-row py-2">
						<p class=" text-black bg-white rounded-full px-2.5 pb-1 mr-3  hover:bg-blue-500">x</p>
						<p>Rap</p>
					</div>
					<div class="row-gender flex flex-row py-2">
						<p class=" text-black bg-white rounded-full px-2.5 pb-1 mr-3  hover:bg-blue-500">x</p>
						<p>Jazz</p>
					</div>
				</div> #}

                {# <div class="gender-selected text-white py-2">
					<div class="row-gender flex flex-row py-2">
						<p class=" text-black bg-white rounded-full px-2.5 pb-1 mr-3  hover:bg-blue-500">x</p>
						<p>Vendredi 12 Juin 2024</p>
					</div>
					<div class="row-gender flex flex-row py-2">
						<p class=" text-black bg-white rounded-full px-2.5 pb-1 mr-3  hover:bg-blue-500">x</p>
						<p>Samedi 13 Juin 2024</p>
					</div>
				</div> #}

                	{# <div class="gender-selected text-white py-2">
					<div class="row-gender flex flex-row py-2">
						<p class=" text-black bg-white rounded-full px-2.5 pb-1 mr-3  hover:bg-blue-500">x</p>
						<p>Lyon</p>
					</div>
					<div class="row-gender flex flex-row py-2">
						<p class=" text-black bg-white rounded-full px-2.5 pb-1 mr-3  hover:bg-blue-500">x</p>
						<p>Rh√¥ne Alpes</p>
					</div>
				</div> #}








<?php
// USER CONTROLLER
namespace App\Controller;

use App\Entity\User;
use App\Form\UserType;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/user')]
class UserController extends AbstractController
{
    #[Route('/', name: 'app_user_index', methods: ['GET'])]
    public function index(UserRepository $userRepository): Response
    {
        return $this->render('user/index.html.twig', [
            'users' => $userRepository->findAll(),
        ]);
    }

    #[Route('/new', name: 'app_user_new', methods: ['GET', 'POST'])]
    public function new(Request $request, EntityManagerInterface $entityManager): Response
    {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->persist($user);
            $entityManager->flush();

            return $this->redirectToRoute('app_user_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('user/new.html.twig', [
            'user' => $user,
            'form' => $form,
        ]);
    }

    #[Route('/{id}', name: 'app_user_show', methods: ['GET'])]
    public function show(User $user): Response
    {
        return $this->render('user/show.html.twig', [
            'user' => $user,
        ]);
    }

    #[Route('/{id}/edit', name: 'app_user_edit', methods: ['GET', 'POST'])]
    public function edit(Request $request, User $user, EntityManagerInterface $entityManager): Response
    {
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->flush();

            return $this->redirectToRoute('app_user_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('user/edit.html.twig', [
            'user' => $user,
            'form' => $form,
        ]);
    }

    #[Route('/{id}', name: 'app_user_delete', methods: ['POST'])]
    public function delete(Request $request, User $user, EntityManagerInterface $entityManager): Response
    {
        if ($this->isCsrfTokenValid('delete'.$user->getId(), $request->request->get('_token'))) {
            $entityManager->remove($user);
            $entityManager->flush();
        }

        return $this->redirectToRoute('app_user_index', [], Response::HTTP_SEE_OTHER);
    }
}


// ENTITY

<?php

namespace App\Entity;

use App\Repository\UserRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserRepository::class)]
class User
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $firstname = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $lastname = null;

    #[ORM\Column(type: Types::DATE_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $birthday = null;



    #[ORM\Column(length: 255, nullable: true)]
    private ?string $email = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $password = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $reg_date = null;

    #[ORM\Column(nullable: true)]
    private ?bool $is_active = null;

    #[ORM\ManyToOne(inversedBy: 'users')]
    private ?Gender $gender = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getFirstname(): ?string
    {
        return $this->firstname;
    }

    public function setFirstname(?string $firstname): static
    {
        $this->firstname = $firstname;

        return $this;
    }

    public function getLastname(): ?string
    {
        return $this->lastname;
    }

    public function setLastname(?string $lastname): static
    {
        $this->lastname = $lastname;

        return $this;
    }

    public function getBirthday(): ?\DateTimeInterface
    {
        return $this->birthday;
    }

    public function setBirthday(?\DateTimeInterface $birthday): static
    {
        $this->birthday = $birthday;

        return $this;
    }


    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(?string $email): static
    {
        $this->email = $email;

        return $this;
    }

    public function getPassword(): ?string
    {
        return $this->password;
    }

    public function setPassword(?string $password): static
    {
        $this->password = $password;

        return $this;
    }

    public function getRegDate(): ?\DateTimeInterface
    {
        return $this->reg_date;
    }

    public function setRegDate(?\DateTimeInterface $reg_date): static
    {
        $this->reg_date = $reg_date;

        return $this;
    }

    public function isIsActive(): ?bool
    {
        return $this->is_active;
    }

    public function setIsActive(?bool $is_active): static
    {
        $this->is_active = $is_active;

        return $this;
    }

    public function getGender(): ?Gender
    {
        return $this->gender;
    }

    public function setGender(?Gender $gender): static
    {
        $this->gender = $gender;

        return $this;
    }

    
}


// FORM

<?php

namespace App\Form;

use App\Entity\Gender;
use App\Entity\User;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class UserType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('firstname')
            ->add('lastname')
            ->add('birthday')
            ->add('email')
            ->add('password')
            ->add('reg_date')
            ->add('is_active')
            ->add('gender', EntityType::class, [
                'class' => Gender::class,
'choice_label' => 'id',
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => User::class,
        ]);
    }
}


// NEW USER TEMPLATE

{% extends 'base.html.twig' %}

{% block title %}New User{% endblock %}

{% block body %}
<div class="form-login-container  bg-slate-100">
		<div class="intro-login">
			<h1>Symtour</h1>
			<h4>Tu as un groupe ou un projet musical ?</h4>
			<p>Inscrit toi et enregistre ton groupe pour organiser des dates
			</p>
			<br><br>
			<h4>Tu as une salle ?</h4>
			<p>Inscrit toi et enregistre ta salle pour booker facilement les groupes
			</p>
		</div>

		<div class="form-login bg-white rounded-lg shadow-md">
			<h4>Inscription</h4>
    {{ include('user/_form.html.twig') }}

			
		</div>
	</div>
    {# <h1>Create new User</h1>


    <a href="{{ path('app_user_index') }}">back to list</a> #}
{% endblock %}
