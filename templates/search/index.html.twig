{% extends 'base.html.twig' %}
{% block body %}
	
		<div class="user-contain   px-28 py-5 bg bg-slate-100">
		{{ form_start(searchForm) }}
		{{ form_widget(searchForm.search, {
				'attr': {
					'class': 'w-full border-2 border-blue-200 hover:border-blue-500 rounded-lg p-2 duration-300',
				}
			}) }}
		{{ form_widget(searchForm.submit, {
				'attr': {
					'class': 'hidden',  
				}
			}) }}
		{{ form_end(searchForm) }}

			{{ form_start(filterForm) }}
			<div class="flex w-full justify-between py-5">
				<div class="select-gender w-3/12 ">
					<select id="{{ filterForm.musicCategory.vars.id }}" name="{{ filterForm.musicCategory.vars.full_name }}" class="w-full border-2 border-blue-200 hover:border-blue-500 rounded-lg p-3 duration-300">
						<option value="">Genre Musical</option>

						{% for music_category in music_categories %}
							<option value="{{ music_category.category }}">{{ music_category.category }}</option>
						{% endfor %}
					</select>

				</div>
				<div class="select-gender w-3/12 ">
					{{ form_widget(filterForm.date, {
									'attr': {
										'class': 'w-full border-2 border-blue-200 hover:border-blue-500 rounded-lg p-2 duration-300 ',
										
									}
								}) }}<br>

				</div>
				<div class="select-gender w-3/12 ">
					{{ form_widget(filterForm.city, {
									'attr': {
										'class': 'w-full border-2 border-blue-200 hover:border-blue-500 rounded-lg p-2 duration-300 ',
										
									}
								}) }}<br>


				</div>
				{{ form_widget(filterForm._token) }}
				<button type="submit">Rechercher</button>
			</div>
			{{ form_end(filterForm, {render_rest: false}) }}

			<hr>


		{% for hall in halls %}
			<div class="card-result w-full my-5 bg-white p-3 rounded-lg shadow-md hover:shadow-lg duration-300">
				<div class="top-card flex justify-between">
					<div class="top-left-card flex">
						<img src="{{ hall.logo }}" alt="" class="mr-2 rounded-lg w-20">
						<div class="info-card">
							<h4 class="font-semibold text-blue-400">{{ hall.name }}
								({{ hall.structure }})</h4>
							<p>{{ hall.hallinfo.city }}</p>


							<div class="list-category flex">
								{% for category in hall.musicCategory %}
									<div class="pins-category bg-sky-800 rounded-full mr-2 px-2  text-white">
										{{ category.category }}
									</div>
								{% endfor %}
							</div>
						</div>
					</div>
					<div class="note-card ">
						<a href="#">254 votes</a>
						<div class="stars flex">
							<img src="https://placehold.co/10" alt="">
							<img src="https://placehold.co/10" alt="">
							<img src="https://placehold.co/10" alt="">
							<img src="https://placehold.co/10" alt="">
							<img src="https://placehold.co/10" alt="">
						</div>
					</div>
				</div>
				<div class="bottom-card flex justify-between">
					<button>+ Follow</button>
					<div class="left-btn-card text-white">
						<a href="{{ path('app_hall_show', {'id': hall.id}) }}" class=" px-3 py-2 rounded-lg bg-blue-400">Voir détails</a>
						<a href="{{ path('app_search_booking', {'id': hall.id, 'date': filterForm.date.vars.value}) }}" class=" px-3 py-2 rounded-lg bg-emerald-400">Réserver</a>
					</div>
				</div>
			</div>
		{% endfor %}
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', function () {
const halls = {{ halls|json_encode|raw }};
const resultContain = document.querySelector('.result-contain');

// Fonction pour mettre à jour les salles affichées en fonction des filtres
function updateHalls() { // Obtenez les valeurs des filtres sélectionnés
const musicCategory = document.getElementById('filter_musicCategory').value;
const date = document.getElementById('filter_date').value;
const city = document.getElementById('filter_city').value;
const searchTerm = document.getElementById('searchForm_search').value.toLowerCase();

// Filtrer les salles en fonction des valeurs sélectionnées
const filteredHalls = halls.filter(hall => {
const isMusicCategoryMatch = ! musicCategory || hall.musicCategory.includes(musicCategory);
const isDateMatch = ! date || (hall.events && hall.events.some(event => event.date !== date));
const isCityMatch = ! city || (hall.hallinfo && hall.hallinfo.city.toLowerCase().includes(city.toLowerCase()));
const isSearchMatch = ! searchTerm || hall.name.toLowerCase().includes(searchTerm);

return isMusicCategoryMatch && isDateMatch && isCityMatch && isSearchMatch;
});

// Mettre à jour les salles affichées
updateResultCards(filteredHalls);
}

// Fonction pour mettre à jour les cartes de résultat
function updateResultCards(filteredHalls) { // Effacer les cartes de résultat existantes
resultContain.innerHTML = '';

// Ajouter des cartes de résultat pour chaque salle filtrée
filteredHalls.forEach(hall => { // Créer et ajouter le HTML de la carte de résultat
const cardHtml = `<div class="card-result w-full my-5 bg-white p-3 rounded-lg shadow-md hover:shadow-lg duration-300">...</div>`;
resultContain.insertAdjacentHTML('beforeend', cardHtml);
});
}

// Attacher des écouteurs d'événements aux éléments de filtre
document.getElementById('filter_musicCategory').addEventListener('change', updateHalls);
document.getElementById('filter_date').addEventListener('change', updateHalls);
document.getElementById('filter_city').addEventListener('input', updateHalls);
document.getElementById('searchForm_search').addEventListener('input', updateHalls);
});
</script>{% endblock %}
