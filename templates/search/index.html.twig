{% extends 'base.html.twig' %}
{% block body %}

	<div class="user-contain px-5 lg:px-28 py-5 bg-slate-100">
		{{ form_start(searchForm) }}
		<div class="relative">
			{{ form_widget(searchForm.search, {
				'attr': {
					'class': 'w-full border-2 border-blue-200 hover:border-blue-500 rounded-lg p-2 duration-300',
				}
			}) }}
			<svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewbox="0 0 24 24" class="absolute right-2 top-2"><path fill="black" d="m20.71 19.29l-3.4-3.39A7.92 7.92 0 0 0 19 11a8 8 0 1 0-8 8a7.92 7.92 0 0 0 4.9-1.69l3.39 3.4a1 1 0 0 0 1.42 0a1 1 0 0 0 0-1.42M5 11a6 6 0 1 1 6 6a6 6 0 0 1-6-6"/></svg>
		</div>
		{{ form_widget(searchForm.submit, {
				'attr': {
					'class': 'hidden',  
				}
			}) }}
		{{ form_end(searchForm) }}
		<hr class="mt-3">

		{{ form_start(filterForm) }}
		<div class="flex w-full justify-between py-3">
			<div class="select-gender w-3/12 ">
				<select id="{{ filterForm.musicCategory.vars.id }}" name="{{ filterForm.musicCategory.vars.full_name }}" class="w-full border-2 border-blue-200 hover:border-blue-500 rounded-lg p-2 duration-300">
					<option value="" disabled selected>
						<p class="text-gray-500">Genre Musical</p>
					</option>

					{% for music_category in music_categories %}
						<option value="{{ music_category.category }}">{{ music_category.category }}</option>
					{% endfor %}
				</select>

			</div>


			<div class="select-gender w-3/12 ">
				{{ form_widget(filterForm.date, {
						'attr': {
							'class': 'w-full border-2 border-blue-200 hover:border-blue-500 rounded-lg p-2 duration-300 ',
							
						}
					}) }}<br>

			</div>
			<div class="select-gender w-3/12 relative">
				{{ form_widget(filterForm.city, {
						'attr': {
							'class': 'w-full border-2 border-blue-200 hover:border-blue-500 rounded-lg p-2 duration-300 ',
							'placeholder' : "Ville",										
						}
					}) }}<br>
				<svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewbox="0 0 256 256" class="absolute right-2 top-2"><path fill="currentColor" d="M128 64a40 40 0 1 0 40 40a40 40 0 0 0-40-40m0 64a24 24 0 1 1 24-24a24 24 0 0 1-24 24m0-112a88.1 88.1 0 0 0-88 88c0 31.4 14.51 64.68 42 96.25a254.19 254.19 0 0 0 41.45 38.3a8 8 0 0 0 9.18 0a254.19 254.19 0 0 0 41.37-38.3c27.45-31.57 42-64.85 42-96.25a88.1 88.1 0 0 0-88-88m0 206c-16.53-13-72-60.75-72-118a72 72 0 0 1 144 0c0 57.23-55.47 105-72 118"/></svg>

			</div>
			{{ form_widget(filterForm._token) }}
			<button type="submit" class=" border-2 border-blue-200 hover:border-blue-500 hover:bg-white rounded-lg p-2 duration-300 ">Appliquer</button>
		</div>
		{{ form_end(filterForm, {render_rest: false}) }}

		<hr>


		{% for hall in halls %}
			<div class="card-result w-full my-5 bg-white p-3 rounded-lg shadow-md hover:shadow-lg duration-300">
				<div class="top-card flex justify-between">
					<div class="top-left-card flex">
						<img src="{{ hall.logo }}" alt="" class="mr-2 rounded-lg w-20">
						<div class="info-card">
							<h4 class="font-semibold text-blue-400">{{ hall.name }}
								({{ hall.structure }})</h4>
							<p>{{ hall.hallinfo.city }}</p>


							<div class="list-category flex">
								{% set displayedBands = [] %}

								{% for bandMember in app.user.profil.bandMembers %}
									{% set musicCategory = bandMember.band.musicCategory.category %}
									{% set isMusicAccepted = hall.musicCategory|filter(category => category.category == musicCategory)|length > 0 %}

									{% if isMusicAccepted %}
										{% set bandName = bandMember.band.name %}
										{% if bandName not in displayedBands %}
											<p class="text-green-500 mr-4">{{ bandName }}
												✓</p>
											{% set displayedBands = displayedBands|merge([bandName]) %}
										{% endif %}
									{% endif %}
								{% endfor %}
							</div>
						</div>
					</div>
					<div class="note-card ">
						<a href="#">254 votes</a>
						<div class="stars flex">
							<img src="https://placehold.co/10" alt="">
							<img src="https://placehold.co/10" alt="">
							<img src="https://placehold.co/10" alt="">
							<img src="https://placehold.co/10" alt="">
							<img src="https://placehold.co/10" alt="">
						</div>
					</div>
				</div>
				<div class="bottom-card flex justify-between">
					<button>+ Follow</button>
					<div class="left-btn-card text-white">
						<a href="{{ path('app_hall_show', {'id': hall.id}) }}" class=" px-3 py-2 rounded-lg bg-blue-400">Voir détails</a>
						<a href="{{ path('app_search_booking', {'id': hall.id, 'date': filterForm.date.vars.value}) }}" class=" px-3 py-2 rounded-lg bg-emerald-400">Réserver</a>
					</div>
				</div>
			</div>
		{% endfor %}
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', function () {
const halls = {{ halls|json_encode|raw }};
const resultContain = document.querySelector('.result-contain');

// Fonction pour mettre à jour les salles affichées en fonction des filtres
function updateHalls() { // Obtenez les valeurs des filtres sélectionnés
const musicCategory = document.getElementById('filter_musicCategory').value;
const date = document.getElementById('filter_date').value;
const city = document.getElementById('filter_city').value;
const searchTerm = document.getElementById('searchForm_search').value.toLowerCase();

// Filtrer les salles en fonction des valeurs sélectionnées
const filteredHalls = halls.filter(hall => {
const isMusicCategoryMatch = ! musicCategory || hall.musicCategory.includes(musicCategory);
const isDateMatch = ! date || (hall.events && hall.events.some(event => event.date !== date));
const isCityMatch = ! city || (hall.hallinfo && hall.hallinfo.city.toLowerCase().includes(city.toLowerCase()));
const isSearchMatch = ! searchTerm || hall.name.toLowerCase().includes(searchTerm);

return isMusicCategoryMatch && isDateMatch && isCityMatch && isSearchMatch;
});

// Mettre à jour les salles affichées
updateResultCards(filteredHalls);
}

// Fonction pour mettre à jour les cartes de résultat
function updateResultCards(filteredHalls) { // Effacer les cartes de résultat existantes
resultContain.innerHTML = '';

// Ajouter des cartes de résultat pour chaque salle filtrée
filteredHalls.forEach(hall => { // Créer et ajouter le HTML de la carte de résultat
const cardHtml = `<div class="card-result w-full my-5 bg-white p-3 rounded-lg shadow-md hover:shadow-lg duration-300">...</div>`;
resultContain.insertAdjacentHTML('beforeend', cardHtml);
});
}

// Attacher des écouteurs d'événements aux éléments de filtre
document.getElementById('filter_musicCategory').addEventListener('change', updateHalls);
document.getElementById('filter_date').addEventListener('change', updateHalls);
document.getElementById('filter_city').addEventListener('input', updateHalls);
document.getElementById('searchForm_search').addEventListener('input', updateHalls);
});
</script>{% endblock %}
