{% extends 'base.html.twig' %}
{% block body %}
	<div class="user-contain px-28 py-5 bg bg-slate-100">

		<div class="bg-white rounded-md shadow-md relative">
			<h4 class="bg-slate-700 text-white p-2 rounded-t-md pl-32 md:pl-40 pt-10 md:pt-4 pb-1 flex justify-between items-center">
				<span class="font-bold">{{hall.name}}</span>

			</h4>
			<div class="img-hall-booking">
				<img src="{{hall.logo}}" alt="{{hall.name}}">
			</div>

			<div class="pl-5 pt-8 md:pl-40 md:pt-5 pb-5 pr-5 w-full">
				<div class="flex flex-wrap justify-between">
					<div class="flex ">
						<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewbox="0 0 256 256" class="mr-2 mt-1">
							<path fill="#334155" d="M128 16a88.1 88.1 0 0 0-88 88c0 75.3 80 132.17 83.41 134.55a8 8 0 0 0 9.18 0C136 236.17 216 179.3 216 104a88.1 88.1 0 0 0-88-88m0 56a32 32 0 1 1-32 32a32 32 0 0 1 32-32"/>
						</svg>
						<div>
							{% if hall.hallInfo.city %}
								<p>{{ hall.hallInfo.city}}
									({{ hall.hallInfo.zipCode ? hall.hallInfo.zipCode : "" }})</p>
								<p>{{ hall.hallInfo.nbrStreet ? hall.hallInfo.nbrStreet ~ ", " : "" }}{{ hall.hallInfo.street ? hall.hallInfo.street : ""}}</p>
								<p>{{ hall.hallInfo.country ? hall.hallInfo.country : "" }}</p>
							{% else %}
								<p>Non précisé</p>
							{% endif %}

						</div>
					</div>
					<div>
						<div class="flex ">
							<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewbox="0 0 24 24" class="mr-2 mt-1"><path fill="#334155" d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 4l-8 5l-8-5V6l8 5l8-5z"/></svg>
							<div>
								<p>{{ hall.hallInfo.email ? hall.hallInfo.email : "Non précisé" }}</p>
							</div>
						</div>
						<div class="flex ">
							<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewbox="0 0 256 256" class="mr-2 mt-1"><path fill="#334155" d="M231.88 175.08A56.26 56.26 0 0 1 176 224C96.6 224 32 159.4 32 80a56.26 56.26 0 0 1 48.92-55.88a16 16 0 0 1 16.62 9.52l21.12 47.15v.12A16 16 0 0 1 117.39 96c-.18.27-.37.52-.57.77L96 121.45c7.49 15.22 23.41 31 38.83 38.51l24.34-20.71a8.12 8.12 0 0 1 .75-.56a16 16 0 0 1 15.17-1.4l.13.06l47.11 21.11a16 16 0 0 1 9.55 16.62"/></svg>
							<div>
								<p>{{ hall.hallInfo.phone ? hall.hallInfo.phone : "Non précisé" }}</p>
							</div>
						</div>
						<div class="flex ">
							<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewbox="0 0 24 24" class="mr-2 mt-1"><path fill="#334155" d="M16.36 14c.08-.66.14-1.32.14-2c0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2m-5.15 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95a8.03 8.03 0 0 1-4.33 3.56M14.34 14H9.66c-.1-.66-.16-1.32-.16-2c0-.68.06-1.35.16-2h4.68c.09.65.16 1.32.16 2c0 .68-.07 1.34-.16 2M12 19.96c-.83-1.2-1.5-2.53-1.91-3.96h3.82c-.41 1.43-1.08 2.76-1.91 3.96M8 8H5.08A7.923 7.923 0 0 1 9.4 4.44C8.8 5.55 8.35 6.75 8 8m-2.92 8H8c.35 1.25.8 2.45 1.4 3.56A8.008 8.008 0 0 1 5.08 16m-.82-2C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2c0 .68.06 1.34.14 2M12 4.03c.83 1.2 1.5 2.54 1.91 3.97h-3.82c.41-1.43 1.08-2.77 1.91-3.97M18.92 8h-2.95a15.65 15.65 0 0 0-1.38-3.56c1.84.63 3.37 1.9 4.33 3.56M12 2C6.47 2 2 6.5 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2"/></svg>
							<div>
								<p>{{ hall.hallInfo.website ? hall.hallInfo.website : "Non précisé" }}</p>
							</div>
						</div>
					</div>
					<div class="flex ">
						<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewbox="0 0 24 24" class="mr-2 mt-1">
							<path fill="#334155" d="M6.27 2.289a2.936 2.936 0 0 0-2.159 2.035A37.876 37.876 0 0 0 4.1 9.842c.045 0 .491-.086.992-.188L6 9.467l.023-2.334c.027-2.711.016-2.652.584-2.938L6.8 4.1H12c5.737 0 5.316-.019 5.64.256c.324.275.308.2.334 2.776L18 9.467l.91.187c.5.1.947.187.992.188a37.876 37.876 0 0 0-.01-5.518a2.927 2.927 0 0 0-2.177-2.037c-.551-.132-10.9-.13-11.442 0m2.515 4.2l-.466 1.862L8 9.637l-.507.475l-.507.474l-2.486.465l-2.485.466v3.754A31.9 31.9 0 0 0 2.071 19l2.415-.9c1.3-.487 2.4-.893 2.45-.9c.069-.014.22.1.577.438l.487.45l.322 1.283l.466 1.861l.145.579h6.14l.145-.579l.466-1.861l.316-1.283l.484-.455c.357-.337.508-.452.577-.438c.051.009 1.154.415 2.45.9l2.418.905a31.9 31.9 0 0 0 .058-3.732v-3.751l-2.487-.466l-2.485-.465l-.507-.474L16 9.637l-.322-1.283l-.466-1.862l-.145-.579H8.93l-.145.579m4.2 5.182c2.541.608 3.471 3.2 1.83 5.091c-2.094 2.419-6.41 1.1-6.428-1.964c-.012-2.149 2.253-3.689 4.6-3.127"/>
						</svg>
						<div>
							<p>{{ hall.structure ? hall.structure : "Non précisé" }}</p>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="tab_project">
			<div class="my-10">
				<div class="flex-responsive ">

					<div class=" calendar bg-slate-700  text-white p-5 rounded-md lg:mr-3 mb-3 lg:mb-0">
						<div class="flex justify-between">
							<button id="prevMonth" class="arrow-left text-white rounded-full bg-slate-500 font-bold  px-2 mx-1">&#10094;</button>
							<div id="monthYearHeader"></div>
							<button id="nextMonth" class="arrow-right text-white rounded-full bg-slate-500 font-bold  px-2 mx-1">&#10095;</button>
						</div>
						<div id="calendrier"></div>
						{# <div id="calendar-holder"></div> #}
					</div>

					<div class="event-list-db bg-white rounded-md shadow-md w-full ">
						<h4 class="bg-slate-700 text-white p-2 rounded-t-md">Historique de mes évènements
						</h4>
						<div class="p-3 w-flex">


							<form action="{{ path('app_search_booking', {'id': hall.id}) }}" method="post">
								<label for="booking_date" class='text-blue-400 font-semibold'>Date Sélectionné :
									<span id="eventCountDisplay"></span>
								</label><br>
								<input type="text" id="booking_date" name="booking_date" value="{{ date|date('d-m-Y') }}" required readonly>
								<br>

								<label for="band_id" class='text-blue-400 font-semibold'>Pour quel projet souhaitez-vous réserver ?</label><br>
								<select name="band_id" required>
									{% set displayedBands = [] %}

									{% for bandMember in app.user.profil.bandMembers %}
										{% set musicCategory = bandMember.band.musicCategory.category %}
										{% set isMusicAccepted = hall.musicCategory|filter(category => category.category == musicCategory)|length > 0 %}
										{% set bandName = bandMember.band.name %}
										{% if bandName not in displayedBands %}

											<option value="{{ bandMember.band.id }}" {% if not isMusicAccepted %} disabled {% endif %}>
												{{ bandMember.band.name }}
												({{ musicCategory }})

												{% if not isMusicAccepted %}
													(Genre musical non acceptée)
												{% endif %}

											</option>
											{% set displayedBands = displayedBands|merge([bandName]) %}
										{% endif %}
									{% endfor %}
								</select><br>
								<button type="submit" class="btnFormAccess">Réserver</button>
							</form>

						</div>
					</div>
				</div>
			</div>
			<div class="event-list-db bg-white rounded-md shadow-md w-full ">
				<h4 class="bg-slate-700 text-white p-2 rounded-t-md">Membres</h4>
				<div class="p-3">
					{% for member in hall.hallMembers %}
						<div class="cardAdminProfil flex justify-between items-center">
							<div class="flex items-center">
							<a href="{{ path('app_profil_show', {'id': member.profile.id}) }}" class="text-blue-400 font-semibold">
								<div class=" img-member-db">
									{% if member.profile.picture %}
										<img src="{{ member.profile.picture }}" alt="{{ member.profile.pseudo }}">
									{% else %}
										<img src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png" alt="{{ member.profile.pseudo }}">
									{% endif %}

								</div>
								</a>
								<div>
									<a href="{{ path('app_profil_show', {'id': member.profile.id}) }}" class="text-blue-400 font-semibold">{{ member.profile.pseudo}}</a>
									<div class="flex">
										{% for hallMemberRole in member.hallMemberRoles %}
											<p class="mr-3">{{ hallMemberRole.roleHall.roleName}}</p>
										{% endfor %}
									</div>
								</div>
							</div>
						</div>
						<hr class="mr-3 my-2">
					{% endfor %}

				</div>

			</div>

		</div>
	</div>

</div>


<script>
	const events = [
{% for event in eventCome %}
{
date: '{{ event.date|date('Y-m-d') }}',
statusDate: '{{ event.status }}'
},{% endfor %}
// Ajoutez d'autres événements au besoin
];
console.log(events)
document.addEventListener('DOMContentLoaded', function () {
const calendar = document.getElementById('calendrier');
const prevMonthButton = document.getElementById('prevMonth');
const nextMonthButton = document.getElementById('nextMonth');
const bookingDateInput = document.getElementById('booking_date');

let currentDate = new Date();

// Replace this with logic to fetch events from your Symfony backend


// Function to render the calendar
function renderCalendar() {
const currentMonth = currentDate.getMonth();
const currentYear = currentDate.getFullYear();
const daysInCurrentMonth = new Date(currentYear, currentMonth + 1, 0).getDate();


// Update month and year header
monthYearHeader.textContent = `${
getMonthName(currentMonth)
} ${currentYear}`;

// Clear previous content
calendar.innerHTML = '';

// Create header row with day names
const dayNames = [
'Lun',
'Mar',
'Mer',
'Jeu',
'Ven',
'Sam',
'Dim'
]; // L'ordre commence par le lundi
dayNames.forEach(day => {
const dayHeader = document.createElement('div');
dayHeader.className = 'day';
dayHeader.textContent = day;
calendar.appendChild(dayHeader);
});

// Create days of the month
const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();
const daysInPreviousMonth = new Date(currentYear, currentMonth, 0).getDate();
const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

// Calculate the position of the first day in the grid
let startPosition = (firstDayOfMonth - 1 + 7) % 7;

// Fill in the days of the previous month
for (let day = daysInPreviousMonth - startPosition + 1; day <= daysInPreviousMonth; day++) {
const dayElement = document.createElement('div');
dayElement.className = 'day other-month-day'; // Add a class to style differently
dayElement.textContent = day;
calendar.appendChild(dayElement);
}

// Reset startPosition for the days of the current month
startPosition = 0;

for (let day = 1; day <= daysInMonth; day++) {
const dayElement = document.createElement('div');
dayElement.className = 'day current-month-day';
dayElement.classList.add('valide-day');
dayElement.textContent = day;

// Ajoutez une condition pour vérifier si le jour est dans le passé
if (new Date(currentYear, currentMonth, day) < new Date()) {
dayElement.classList.add('other-month-day');
dayElement.classList.remove('valide-day');
} else {
const currentDate = new Date();
if (day === currentDate.getDate() && currentMonth === currentDate.getMonth() && currentYear === currentDate.getFullYear()) {
dayElement.classList.add('current-day'); // Add a class for the current day
}

// Check if there are events on this day
const eventsOnDay = events.filter(event => {
const eventDate = new Date(event.date);
return eventDate.getDate() === day && eventDate.getMonth() === currentMonth && eventDate.getFullYear() === currentYear;
});

// Process events based on statusDate
const eventWithStatus1 = eventsOnDay.find(event => event.statusDate === '1');
const eventWithStatus2 = eventsOnDay.find(event => event.statusDate === '2');
const eventWithStatus3 = eventsOnDay.filter(event => event.statusDate === '3'); // Utiliser filter pour obtenir tous les événements avec le statut 3

if (eventWithStatus1) {
dayElement.classList.remove('valide-day');
dayElement.classList.add('event-reserved');
} else if (eventWithStatus3.length > 0) {
dayElement.classList.remove('valide-day');
dayElement.classList.add('in-progress');
addClickEventListener(dayElement, day, currentMonth, currentYear, eventWithStatus3.length);
} else {
addClickEventListener(dayElement, day, currentMonth, currentYear, 0);
}
} calendar.appendChild(dayElement);
}

function addClickEventListener(element, day, month, year, eventCount) {
element.addEventListener('click', () => {
const formattedDate = `${
day.toString().padStart(2, '0')
}-${
(month + 1).toString().padStart(2, '0')
}-${year}`;
document.getElementById('booking_date').value = formattedDate;

// Afficher le nombre d'événements avec le statut 3 au-dessus du formulaire
const eventCountDisplay = document.getElementById('eventCountDisplay');
if (eventCountDisplay) {
if (eventCount == 0) {
eventCountDisplay.innerHTML = `<span class=" text-green-500">Libre</span>`;
} else {
const demandeText = eventCount === 1 ? 'Demande' : 'Demandes';
eventCountDisplay.innerHTML = `<span class="text-red-500">${eventCount} ${demandeText} en cours</span>`;
}
}
});
}

// Fill in the remaining days of the grid with the next month
const remainingDays = 35 - startPosition - daysInMonth; // 42 is the maximum number of days in a grid
for (let day = 1; day <= remainingDays; day++) {
const dayElement = document.createElement('div');
dayElement.className = 'day other-month-day'; // Add a class to style differently
dayElement.textContent = day;
calendar.appendChild(dayElement);
}
}

// Helper function to get month name
function getMonthName(month) {
const monthNames = [
'Janvier',
'Février',
'Mars',
'Avril',
'Mai',
'Juin',
'Juillet',
'Août',
'Septembre',
'Octobre',
'Novembre',
'Décembre'
];
return monthNames[month];
}

// Event listeners for navigation buttons
prevMonthButton.addEventListener('click', function () {
currentDate.setMonth(currentDate.getMonth() - 1);
renderCalendar();
});

nextMonthButton.addEventListener('click', function () {
currentDate.setMonth(currentDate.getMonth() + 1);
renderCalendar();
});

// Initial render
renderCalendar();
});


function formatDate(date) {
const options = {
weekday: 'long',
day: 'numeric',
month: 'long',
year: 'numeric'
};
const formattedDate = new Date(date).toLocaleDateString('fr-FR', options);
return formattedDate;
}
</script>{% endblock %}
