{% extends 'base.html.twig' %}

{% block title %}Hall
{% endblock %}

{% block body %}


	<div class="user-contain px-5 lg:px-28 py-5  bg-slate-100">
		<div class="header-user flex justify-evenly">
			<div class="pic_profil">
				<img src="{{ hall.logo }}" alt="" class="user-img">
			</div>
			<div class="user-infos">
				<h3 class="font-bold ">{{ hall.name }}</h3>
			</div>

		</div>

		<div class="tab_project">
			<div class="my-3">
				<div class="lg:flex lg:relative">
					<div class=" calendar bg-slate-700  text-white p-5 rounded-md lg:mr-3 mb-3 lg:mb-0">
						<div class="flex justify-between">
							<button id="prevMonth" class="arrow-left text-white rounded-full bg-slate-500 font-bold  px-2 mx-1">&#10094;</button>
							<div id="monthYearHeader"></div>
							<button id="nextMonth" class="arrow-right text-white rounded-full bg-slate-500 font-bold  px-2 mx-1">&#10095;</button>
						</div>
						<div id="calendrier"></div>
						{# <div id="calendar-holder"></div> #}
					</div>


					<div id="eventModal" class="modal  bg-white rounded-md shadow-md lg:absolute">
						<div class="modal-content"></div>
					</div>
					<div class="event-list-db bg-white rounded-md shadow-md w-full mt-3 lg:mt-0">
						<h4 class="bg-slate-700 text-white p-2 rounded-t-md">Mes demandes de date</h4>
						<div class="p-3">
							{% for event in hall.events %}
								{% if event.status == 3 %}
									<div class="cardAdminProfil flex justify-between ">
										<p>{{ event.date|date('d-m-Y')  }}</p>
										{% for bandEvent in event.bandEvents %}

											<a href="{{ path('app_band_show', {'id': bandEvent.band.id}) }}">{{ bandEvent.band.name }}</a>
											<p>{{ bandEvent.band.musicCategory.category }}
												/
												{{ bandEvent.band.defineStyle }}</p>

											<div class="flex">
												<form action="{{ path('app_hall_show', {'id': hall.id}) }}" method="post">
													<input type="hidden" name="action" value="validate">
													<input type="hidden" name="bandId" value="{{ bandEvent.band.id }}">
													<input type="hidden" name="event_id" value="{{ event.id }}">
													<button type="submit" class="validate-button px-2 py-1 rounded-lg bg-emerald-300 text-white hover:bg-emerald-500">Valider</button>
												</form>
												<form action="{{ path('app_hall_show', {'id': hall.id}) }}" method="post">
													<input type="hidden" name="action" value="reject">
													<input type="hidden" name="bandId" value="{{ bandEvent.band.id }}">
													<input type="hidden" name="event_id" value="{{ event.id }}">
													<button type="submit" class="reject-button px-2 py-1 rounded-lg bg-red-300 text-white hover:bg-red-600">Refuser</button>
												</form>
											</div>
										{% endfor %}
									</div>
									<hr class="my-3">
								{% endif %}
							{% endfor %}
							<a href="{{ path('app_event_new') }}" class="text-slate-400 hover:text-blue-500 ">
								<button class="bg-slate-700 rounded-full px-2 pb-1 mr-4 text-white font-bold hover:bg-blue-500">+</button>Organiser un nouvel Event</a>
						</div>
					</div>
				</div>
				<div class="lg:flex lg:justify-between">
					<div class="md:w-full lg:w-1/2 lg:mr-3 bg-white rounded-md shadow-md mt-3 ">
						<div class="flex justify-between item-align bg-slate-700 relative rounded-t-md">
							<h4 class=" text-white p-2 ">Mes prochains events</h4>
							<div class="flex absolute right-2 top-2">
								<div id="arrow-left" class="arrow-left text-white rounded-full bg-slate-500 font-bold  px-2 mx-1">&#10094;</div>
								<div id="arrow-right" class="arrow-right text-white rounded-full bg-slate-500 font-bold  px-2 mx-1">&#10095;</div>
							</div>
						</div>
						{% set count = 0 %}
						{% for events in eventCome %}
							{% if events.status == 1 %}
								{% set count = count + 1 %}
							{% endif %}
						{% endfor %}
						{% set widthPercentage = count * 100 %}


						<div class="event-confirm-db-container">
							{% if count == 0 %}
								<div class="card-event-db bg-white ">
									<p class="text-center p-3">Aucun évènement prévus
									</p>
								</div>
							{% endif %}
							<div class=" event-confirm-db-content" style="width: {{ widthPercentage }}%">
								{% for events in eventCome %}

									{% if events.status == 1 %}

										<div class="card-event-db bg-white ">

											<div class="flex bg-slate-500 text-white p-2  items-center">
												<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewbox="0 0 24 24" class="mr-3"><path fill="white" d="M14.5 18q-1.05 0-1.775-.725T12 15.5q0-1.05.725-1.775T14.5 13q1.05 0 1.775.725T17 15.5q0 1.05-.725 1.775T14.5 18M5 22q-.825 0-1.412-.587T3 20V6q0-.825.588-1.412T5 4h1V2h2v2h8V2h2v2h1q.825 0 1.413.588T21 6v14q0 .825-.587 1.413T19 22zm0-2h14V10H5z"/></svg>
												<p>{{ events.date|format_datetime(locale='fr',pattern="EEEE dd MMMM YYYY") }}</p>
											</div>
											<div class="plateau">
												{% for bandEvent in events.bandEvents|slice(0, 3) %}
													{% if bandEvent.status == "validate" %}

														<div class="clicBand">
															<div class=" flex justify-between items-center">
																<div class="flex p-2 items-center relative">
																	<div class="img-project-db border-2 border-green-500 ">
																		<img src="{{ bandEvent.band.logo }}" alt="">
																	</div>
																	<div class=" bg-green-500 text-white px-2 py-1 rounded-full absolute text-xs top-1 left-10">
																		✓
																	</div>
																	<div>
																		<p class="text-blue-400 font-semibold">{{ bandEvent.band.name }}</p>
																		<p>{{ bandEvent.band.musicCategory.category }}
																			/
																			{{ bandEvent.band.defineStyle }}</p>
																	</div>
																</div>
															</div>
															<div class="openBand">
																{% for member in bandEvent.band.bandMembers %}
																	<div class=" flex justify-between list-member-event">
																		<div class="flex">
																			<div class="img-profil-event border-2 border-slate-500">
																				<img src="{{ member.profil.picture }}" alt="" class="w-5">

																			</div>
																			<p>{{ member.profil.pseudo }}
																			</p>
																		</div>
																		<p>{{ member.role.roleName }}</p>
																	</div>
																{% endfor %}
															</div>
														</div>
														<hr>
													{% endif %}
												{% endfor %}
											</div>
										</div>
									{% endif %}
								{% endfor %}
							</div>
						</div>
					</div>
					<div class="md:w-full lg:w-1/2 lg:ml-3 bg-slate-200 rounded-md shadow-md mt-3 ">
						<h4 class="bg-slate-700 text-white p-2 rounded-t-md">Mon dernier events
						</h4>
						<div class=" flex justify-between">
							{% for events in eventPast|slice(0, 1) %}

								{% if events.status == 1 %}

									<div class="card-event-db ">

										<div class="flex bg-slate-500 text-white p-2  items-center">
											<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewbox="0 0 24 24" class="mr-3"><path fill="white" d="M14.5 18q-1.05 0-1.775-.725T12 15.5q0-1.05.725-1.775T14.5 13q1.05 0 1.775.725T17 15.5q0 1.05-.725 1.775T14.5 18M5 22q-.825 0-1.412-.587T3 20V6q0-.825.588-1.412T5 4h1V2h2v2h8V2h2v2h1q.825 0 1.413.588T21 6v14q0 .825-.587 1.413T19 22zm0-2h14V10H5z"/></svg>
											<p>{{ events.date|format_datetime(locale='fr',pattern="EEEE dd MMMM YYYY") }}</p>
										</div>
										<div class="plateau">
											{% for bandEvent in events.bandEvents|slice(0, 3) %}
												{% if bandEvent.status == "validate" %}

													<div class="clic">
														<div class=" flex justify-between items-center">
															<div class="flex p-2 items-center relative">
																<div class="img-project-db border-2 border-slate-500 ">
																	<img src="{{ bandEvent.band.logo }}" alt="">
																</div>

																<div>
																	<p class="text-blue-400 font-semibold">{{ bandEvent.band.name }}</p>
																	<p>{{ bandEvent.band.musicCategory.category }}
																		/
																		{{ bandEvent.band.defineStyle }}</p>
																</div>
															</div>
														</div>
													</div>
													<hr>
												{% endif %}
											{% endfor %}
										</div>
									</div>
								{% endif %}
							{% endfor %}
						</div>
					</div>
				</div>
			</div>
			<div class="my-3">
				<div class="event-list-db bg-white rounded-md shadow-md mt-3 ">
					<h4 class="bg-slate-700 text-white p-2 rounded-t-md">Membres
					</h4>
					<div class="p-3">
						{% for member in hall.hallMembers %}
							<div class="cardAdminProfil flex justify-between items-center">
								<div class="flex items-center">
									<div class=" img-member-db">
										<img src="{{ member.profile.picture }}" alt="{{ member.profile.pseudo }}">
									</div>
									<div>
										<a href="{{ path('app_profil_show', {'id': member.profile.id}) }}" class="text-blue-400 font-semibold">{{ member.profile.pseudo}}</a>
										<p>{{ member.role.roleName}}</p>
									</div>
								</div>
								<p>{{ member.dateCreate|date('d-m-Y')  }}</p>
							</div>
							<hr class="my-3">
						{% endfor %}
						<a href="{{ path('app_hall_member_new') }}" class="text-slate-400 hover:text-blue-500 ">
							<button class="bg-slate-700 rounded-full px-2 pb-1 mr-4 text-white font-bold hover:bg-blue-500">+</button>Ajouter un nouveau membre</a>
					</div>
				</div>
			</div>
		</div>

	</div>

	<script>
		const events = [
{% for event in eventCome %}
{% if event.status != 2 %}
{
date: '{{ event.date|date('Y-m-d') }}',
statusDate: '{{ event.status }}',
bands: [{% for bandEvent in event.bandEvents %}{
name: '{{ bandEvent.band.name }}',
logo: '{{ bandEvent.band.logo }}',
music: '{{ bandEvent.band.musicCategory.category }}',
style: '{{ bandEvent.band.defineStyle }}',
status: '{{ bandEvent.status }}',
// Ajoutez d'autres propriétés de la bande ici si nécessaire
},{% endfor %}]
},
{% endif %}
{% endfor %}
// Ajoutez d'autres événements au besoin
];

console.log(events)
document.addEventListener('DOMContentLoaded', function () {
const calendar = document.getElementById('calendrier');
const prevMonthButton = document.getElementById('prevMonth');
const nextMonthButton = document.getElementById('nextMonth');
const monthYearHeader = document.getElementById('monthYearHeader');

let currentDate = new Date();

// Replace this with logic to fetch events from your Symfony backend


// Function to render the calendar
function renderCalendar() {
const currentMonth = currentDate.getMonth();
const currentYear = currentDate.getFullYear();
const daysInCurrentMonth = new Date(currentYear, currentMonth + 1, 0).getDate();


// Update month and year header
monthYearHeader.textContent = `${
getMonthName(currentMonth)
} ${currentYear}`;

// Clear previous content
calendar.innerHTML = '';

// Create header row with day names
const dayNames = [
'Lun',
'Mar',
'Mer',
'Jeu',
'Ven',
'Sam',
'Dim'
]; // L'ordre commence par le lundi
dayNames.forEach(day => {
const dayHeader = document.createElement('div');
dayHeader.className = 'day';
dayHeader.textContent = day;
calendar.appendChild(dayHeader);
});

// Create days of the month
const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();
const daysInPreviousMonth = new Date(currentYear, currentMonth, 0).getDate();
const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

// Calculate the position of the first day in the grid
let startPosition = (firstDayOfMonth - 1 + 7) % 7;

// Fill in the days of the previous month
for (let day = daysInPreviousMonth - startPosition + 1; day <= daysInPreviousMonth; day++) {
const dayElement = document.createElement('div');
dayElement.className = 'day other-month-day'; // Add a class to style differently
dayElement.textContent = day;
calendar.appendChild(dayElement);
}

// Reset startPosition for the days of the current month
startPosition = 0;

// Fill in the days of the current month
for (let day = 1; day <= daysInMonth; day++) {
const dayElement = document.createElement('div');
dayElement.className = 'day current-month-day'; // Add a class to style differently
dayElement.textContent = day;

// Check if there are events on this day
const eventsOnDay = events.filter(event => {
const eventDate = new Date(event.date);
return eventDate.getDate() === day && eventDate.getMonth() === currentMonth && eventDate.getFullYear() === currentYear;
});

// Add event styling if there are events
if (eventsOnDay.length > 0 ) {
if (eventsOnDay.every(event => event.statusDate == "1")) {
dayElement.classList.add('event-day-valid');
} else if (eventsOnDay.every(event => event.statusDate == "3")) {
dayElement.classList.add('event-day');
}
dayElement.addEventListener('click', () => openEventModal(`${currentYear}-${
currentMonth + 1
}-${day}`));
}
calendar.appendChild(dayElement);
}

// console.log(eventsOnDay);


// Fill in the remaining days of the grid with the next month
const remainingDays = 35 - startPosition - daysInMonth; // 42 is the maximum number of days in a grid
for (let day = 1; day <= remainingDays; day++) {
const dayElement = document.createElement('div');
dayElement.className = 'day other-month-day'; // Add a class to style differently
dayElement.textContent = day;
calendar.appendChild(dayElement);
}
}

// Helper function to get month name
function getMonthName(month) {
const monthNames = [
'Janvier',
'Février',
'Mars',
'Avril',
'Mai',
'Juin',
'Juillet',
'Août',
'Septembre',
'Octobre',
'Novembre',
'Décembre'
];
return monthNames[month];
}

// Event listeners for navigation buttons
prevMonthButton.addEventListener('click', function () {
currentDate.setMonth(currentDate.getMonth() - 1);
renderCalendar();
});

nextMonthButton.addEventListener('click', function () {
currentDate.setMonth(currentDate.getMonth() + 1);
renderCalendar();
});

// Initial render
renderCalendar();
});

function openEventModal(date) {
const formattedDate = date.replace(/-(\d)-/g, '-0$1-').replace(/-(\d{1})$/g, '-0$1');
const eventsOnSelectedDate = events.filter(event => event.date === formattedDate);

if (eventsOnSelectedDate.length > 0) {
const modalContent = document.querySelector('#eventModal .modal-content');
modalContent.innerHTML = '<div class="close hidden" onclick="closeModal()">&times;</div>';

// Utilisez un objet pour regrouper les groupes par date
const groupedEvents = {};

// Bouclez sur les événements pour les regrouper par date
eventsOnSelectedDate.forEach(eventDetails => {
if (! groupedEvents[eventDetails.date]) {
groupedEvents[eventDetails.date] = {
statusDate: eventDetails.statusDate,
bands: []
};
}
// Utilisez eventDetails.bands comme un tableau d'objets pour chaque groupe
eventDetails.bands.forEach(band => {
groupedEvents[eventDetails.date].bands.push({
name: band.name,
logo: band.logo,
music: band.music,
style: band.style,
status: band.status
});
});
});
console.log(groupedEvents);

// Bouclez sur les groupes regroupés et ajoutez-les à la modale
for (const [date, dateDetails] of Object.entries(groupedEvents)) {
const {statusDate, bands} = dateDetails;

if (statusDate == "1") {
modalContent.innerHTML += `
	<div class="flex justify-between item-align bg-green-500 relative rounded-t-md text-white p-2 ">
	<p> ${
formatDate(date)
}</p>
	<div class="close ml-3 px-1 font-bold bg-green-700 rounded-full " onclick="closeModal()">&times;</div>
	</div>
	`;
bands.forEach(band => {
if (band.status == "validate") {
modalContent.innerHTML += `
    <div class="flex justify-between items-center">
        <div class="flex p-2 items-center relative">
            <div class="img-project-db border-2 border-green-500 ">
				<img src="${
band.logo
}" alt="">
			</div>
			<div class=" bg-green-500 text-white px-2 py-1 rounded-full absolute text-xs top-1 left-10">
				✓
			</div>
            <div>
                <p class="text-blue-400 font-semibold">${
band.name
}</p>
                <p>${
band.music
}/${
band.style
}</p>
            </div>
        </div>
    </div>
`;
} else if (band.status == "guest") {
modalContent.innerHTML += `
    <div class="flex justify-between items-center">
        <div class="flex p-2 items-center relative">
            <div class="img-project-db border-2 bg-slate-300">
                <img src="${
band.logo
}" alt="">
            </div>
            <div class="bg-slate-300 text-white px-2 py-1 rounded-full absolute text-xs top-1 left-10">
                ⧖
            </div>
            <div>
                <p class="text-blue-400 font-semibold">${
band.name
}</p>
                <p>${
band.music
}/${
band.style
}</p>
            </div>
        </div>
    </div>
`;
}
});
} else {
modalContent.innerHTML += `
	<div class="flex justify-between item-align bg-slate-500 relative rounded-t-md text-white p-2 ">
	<p> ${
formatDate(date)
}</p>
	<div class="close ml-3 px-1 font-bold bg-slate-700 rounded-full " onclick="closeModal()">&times;</div>
	</div>
	`;

bands.forEach(band => {
if (band.status == "validate") {
modalContent.innerHTML += `
    <div class="flex justify-between items-center">
        <div class="flex p-2 items-center relative">
            <div class="img-project-db border-2 border-slate-500 ">
				<img src="${
band.logo
}" alt="">
			</div>
			
            <div>
                <p class="text-blue-400 font-semibold">${
band.name
}</p>
                <p>${
band.music
}/${
band.style
}</p>
            </div>
        </div>
    </div>
`;
}
})
}

}

// Affichez la modale
document.getElementById('eventModal').style.display = 'block';
} else { // Aucun événement trouvé pour la date sélectionnée
console.error (`Aucun détail d'événement trouvé pour la date : ${date}`);
}
}

function formatDate(date) {
const options = {
weekday: 'long',
day: 'numeric',
month: 'long',
year: 'numeric'
};
const formattedDate = new Date(date).toLocaleDateString('fr-FR', options);
return formattedDate;
}


function closeModal() {
document.getElementById('eventModal').style.display = 'none';
}
	</script>


	<script>
		document.addEventListener('DOMContentLoaded', function () {
const container = document.querySelector('.event-confirm-db-container');
const content = document.querySelector('.event-confirm-db-content');
const arrowLeft = document.getElementById('arrow-left');
const arrowRight = document.getElementById('arrow-right');

// Initialisation de la position à 0
let currentPosition = 0;

arrowLeft.addEventListener('click', function () { // Décrémente la position
currentPosition -= 100;
updatePosition();
});

arrowRight.addEventListener('click', function () { // Incrémente la position
currentPosition += 100;
updatePosition();
});

arrowLeft.addEventListener('mouseover', function () { // Change le curseur au survol
arrowLeft.style.cursor = 'pointer';
});

arrowRight.addEventListener('mouseover', function () { // Change le curseur au survol
arrowRight.style.cursor = 'pointer';
});

arrowLeft.addEventListener('mouseout', function () { // Rétablit le curseur par défaut
arrowLeft.style.cursor = 'default';
});

arrowRight.addEventListener('mouseout', function () { // Rétablit le curseur par défaut
arrowRight.style.cursor = 'default';
});

function updatePosition() { // Limite la position pour éviter de dépasser le contenu
currentPosition = Math.max(0, Math.min(currentPosition, content.scrollWidth - container.clientWidth));

// Ajout d'une transition pour une animation fluide
content.style.transition = 'left 0.5s ease-in-out';
content.style.left = `-${currentPosition}%`;

// Rend la flèche gauche transparente et non cliquable si à la limite gauche
arrowLeft.style.opacity = currentPosition === 0 ? 0.5 : 1;
arrowLeft.style.pointerEvents = currentPosition === 0 ? 'none' : 'auto';

// Rend la flèche droite transparente et non cliquable si à la limite droite
const count = {{ count }};
arrowRight.style.opacity = currentPosition >= (count - 1) * 100 ? 0.5 : 1;
arrowRight.style.pointerEvents = currentPosition >= (count - 1) * 100 ? 'none' : 'auto';

// Réinitialise la transition après l'animation
setTimeout(() => {
content.style.transition = '';
}, 500);
}
});
	</script>

{% endblock %}
